--- a/src/wispr.c	2015-03-03 10:23:37.163894844 +0000
+++ b/src/wispr.c	2015-03-03 11:59:49.916179175 +0000
@@ -30,8 +30,58 @@
 
 #include "connman.h"
 
-#define STATUS_URL_IPV4  "http://ipv4.connman.net/online/status.html"
-#define STATUS_URL_IPV6  "http://ipv6.connman.net/online/status.html"
+#include <string.h>
+#include <stdio.h>
+#include <sys/socket.h>
+#include <sys/ioctl.h>
+#include <net/if.h>
+#include <unistd.h>
+
+#define STATUS_URL_IPV4  "http://ipv4.online.osmc.io/online/status.html"
+#define STATUS_URL_IPV6  "http://ipv6.online.osmc.io/online/status.html"
+
+int parse_option(const char *line, const char *option, char *value, size_t size)
+{
+    const char *p0, *p1;
+    int len;
+
+    p0 = strstr(line, option);
+    if (!p0)
+        return 0;
+    p0 += strlen(option);
+    p1  = strchr(p0, ' ');
+    if (!p1)
+       p1 = p0 + strlen(p0);
+    len = p1 - p0;
+    if (len > size - 1)
+        len = size - 1;
+    memcpy(value, p0, len);
+    value[len] = '\0';
+    return len;
+}
+
+void get_cmdline_option(const char *option, char *value, size_t size)
+{
+    FILE  *fp;
+    char  *line = NULL;
+    size_t len = 0;
+    size_t read;
+
+    if (!size)
+        return;
+    *value = '\0';
+    fp = fopen("/proc/cmdline", "r");
+    if (fp == NULL)
+         return;
+    while ((read = getline(&line, &len, fp)) != -1) {
+        if (parse_option(line, option, value, size))
+            break;
+    }
+    fclose(fp);
+    if (line)
+        free(line);
+    return;
+}
 
 struct connman_wispr_message {
 	bool has_error;
@@ -722,7 +772,7 @@
 		if (wp_context->wispr_msg.message_type >= 0)
 			break;
 
-		if (g_web_result_get_header(result, "X-ConnMan-Status",
+		if (g_web_result_get_header(result, "X-OSMC-Status",
 						&str)) {
 			portal_manage_status(result, wp_context);
 			return false;
@@ -798,7 +848,45 @@
 	}
 
 	g_web_set_accept(wp_context->web, NULL);
-	g_web_set_user_agent(wp_context->web, "ConnMan/%s wispr", VERSION);
+	/* Get the installed device */
+	char osmcdev[32];
+	get_cmdline_option("osmcdev=", osmcdev, sizeof(osmcdev));
+	/* Get the OS version */
+	FILE *fp = fopen("/etc/os-release", "r");
+	static char version[256];
+	if (fp)
+	{
+		char line[256];
+		char *key;
+		char *val;
+		while ((fgets(line, sizeof(line), fp) != NULL))
+		{
+			key = strtok(line, "=");
+			val = strtok(NULL, "=");
+			if (strncmp(key, "VERSION_ID", 1024) == 0)
+			{
+				strncpy(version, val, sizeof(val));
+				version[strlen(version) - 1 ] = '\0';
+			}
+		}
+		fclose(fp);
+	 }
+
+	/* Get the MAC of eth0 so NAT does not affect device count */
+	int fd;
+	struct ifreq ifr;
+	unsigned char *mac;
+	fd = socket(AF_INET, SOCK_DGRAM, 0);
+	ifr.ifr_addr.sa_family = AF_INET;
+	strncpy(ifr.ifr_name, "eth0", IFNAMSIZ-1);
+	ioctl(fd, SIOCGIFHWADDR, &ifr);
+	close(fd);
+	mac = (unsigned char *)ifr.ifr_hwaddr.sa_data;
+	
+	if (osmcdev[0] != '\0' && version[0] != '\0')
+		g_web_set_user_agent(wp_context->web, "OSMC running %s,%s,%.2x:%.2x:%.2x:%.2x:%.2x:%.2x", osmcdev, version, mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
+	else
+		g_web_set_user_agent(wp_context->web, "OSMC"); 
 	g_web_set_close_connection(wp_context->web, TRUE);
 
 	connman_wispr_message_init(&wp_context->wispr_msg);
