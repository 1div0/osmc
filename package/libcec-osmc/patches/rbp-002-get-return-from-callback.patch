From af9925bd416f16a32de4e70f4b92c94845299300 Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Sat, 13 Jun 2015 16:30:32 +0200
Subject: [PATCH] Add mechanism to deliver return value of
 CCECClient::Callback* functions.

---
 src/libcec/CECClient.cpp | 13 ++++++++----
 src/libcec/CECClient.h   | 55 +++++++++++++++++++++++++++++++++++++++++-------
 2 files changed, 56 insertions(+), 12 deletions(-)

diff --git a/src/libcec/CECClient.cpp b/src/libcec/CECClient.cpp
index 35c2d3e..77898b3 100644
--- a/src/libcec/CECClient.cpp
+++ b/src/libcec/CECClient.cpp
@@ -1504,8 +1504,12 @@ void CCECClient::QueueConfigurationChanged(const libcec_configuration& config)
 
 int CCECClient::QueueMenuStateChanged(const cec_menu_state newState)
 {
-  m_callbackCalls.Push(new CCallbackWrap(newState));
-  return 1; //TODO
+  CCallbackWrap *wrapState = new CCallbackWrap(newState, true);
+  m_callbackCalls.Push(wrapState);
+  int result(wrapState->Result(1000));
+
+  delete wrapState;
+  return result;
 }
 
 void CCECClient::QueueSourceActivated(bool bActivated, const cec_logical_address logicalAddress)
@@ -1538,7 +1542,7 @@ void* CCECClient::Process(void)
         CallbackConfigurationChanged(cb->m_config);
         break;
       case CCallbackWrap::CEC_CB_MENU_STATE:
-        CallbackMenuStateChanged(cb->m_menuState);
+        cb->Report(CallbackMenuStateChanged(cb->m_menuState));
         break;
       case CCallbackWrap::CEC_CB_SOURCE_ACTIVATED:
         CallbackSourceActivated(cb->m_bActivated, cb->m_logicalAddress);
@@ -1547,7 +1551,8 @@ void* CCECClient::Process(void)
         break;
       }
 
-      delete cb;
+      if (!cb->m_keepResult)
+        delete cb;
     }
   }
   return NULL;
diff --git a/src/libcec/CECClient.h b/src/libcec/CECClient.h
index 12f8a3b..2d85c32 100644
--- a/src/libcec/CECClient.h
+++ b/src/libcec/CECClient.h
@@ -36,6 +36,7 @@
 #include <string>
 #include "platform/threads/threads.h"
 #include "platform/util/buffer.h"
+#include "platform/threads/mutex.h"
 #include <memory>
 
 namespace CEC
@@ -56,7 +57,9 @@ namespace CEC
       m_alertType(CEC_ALERT_SERVICE_DEVICE),
       m_menuState(CEC_MENU_STATE_ACTIVATED),
       m_bActivated(false),
-      m_logicalAddress(CECDEVICE_UNKNOWN) {}
+      m_logicalAddress(CECDEVICE_UNKNOWN),
+      m_keepResult(false),
+      m_bSucceeded(false) {}
 
     CCallbackWrap(const cec_keypress& key) :
       m_type(CEC_CB_KEY_PRESS),
@@ -64,7 +67,9 @@ namespace CEC
       m_alertType(CEC_ALERT_SERVICE_DEVICE),
       m_menuState(CEC_MENU_STATE_ACTIVATED),
       m_bActivated(false),
-      m_logicalAddress(CECDEVICE_UNKNOWN) {}
+      m_logicalAddress(CECDEVICE_UNKNOWN),
+      m_keepResult(false),
+      m_bSucceeded(false) {}
 
     CCallbackWrap(const cec_log_message& message) :
       m_type(CEC_CB_LOG_MESSAGE),
@@ -72,7 +77,9 @@ namespace CEC
       m_alertType(CEC_ALERT_SERVICE_DEVICE),
       m_menuState(CEC_MENU_STATE_ACTIVATED),
       m_bActivated(false),
-      m_logicalAddress(CECDEVICE_UNKNOWN) {}
+      m_logicalAddress(CECDEVICE_UNKNOWN),
+      m_keepResult(false),
+      m_bSucceeded(false) {}
 
     CCallbackWrap(const libcec_alert type, const libcec_parameter& param) :
       m_type(CEC_CB_ALERT),
@@ -80,7 +87,9 @@ namespace CEC
       m_alertParam(param),
       m_menuState(CEC_MENU_STATE_ACTIVATED),
       m_bActivated(false),
-      m_logicalAddress(CECDEVICE_UNKNOWN) {}
+      m_logicalAddress(CECDEVICE_UNKNOWN),
+      m_keepResult(false),
+      m_bSucceeded(false) {}
 
     CCallbackWrap(const libcec_configuration& config) :
       m_type(CEC_CB_CONFIGURATION),
@@ -88,21 +97,46 @@ namespace CEC
       m_config(config),
       m_menuState(CEC_MENU_STATE_ACTIVATED),
       m_bActivated(false),
-      m_logicalAddress(CECDEVICE_UNKNOWN) {}
+      m_logicalAddress(CECDEVICE_UNKNOWN),
+      m_keepResult(false),
+      m_bSucceeded(false) {}
 
-    CCallbackWrap(const cec_menu_state newState) :
+    CCallbackWrap(const cec_menu_state newState, const bool keepResult = false) :
       m_type(CEC_CB_MENU_STATE),
       m_alertType(CEC_ALERT_SERVICE_DEVICE),
       m_menuState(newState),
       m_bActivated(false),
-      m_logicalAddress(CECDEVICE_UNKNOWN) {}
+      m_logicalAddress(CECDEVICE_UNKNOWN),
+      m_keepResult(keepResult),
+      m_bSucceeded(false) {}
 
     CCallbackWrap(bool bActivated, const cec_logical_address logicalAddress) :
       m_type(CEC_CB_SOURCE_ACTIVATED),
       m_alertType(CEC_ALERT_SERVICE_DEVICE),
       m_menuState(CEC_MENU_STATE_ACTIVATED),
       m_bActivated(bActivated),
-      m_logicalAddress(logicalAddress) {}
+      m_logicalAddress(logicalAddress),
+      m_keepResult(false),
+      m_bSucceeded(false) {}
+
+    int Result(uint32_t iTimeout)
+    {
+      PLATFORM::CLockObject lock(m_mutex);
+
+      bool bReturn = m_bSucceeded ? true : m_condition.Wait(m_mutex, m_bSucceeded, iTimeout);
+      if (bReturn)
+        return m_result;
+      return 0;
+    }
+
+    void Report(int result)
+    {
+      PLATFORM::CLockObject lock(m_mutex);
+
+      m_result = result;
+      m_bSucceeded = true;
+      m_condition.Signal();
+    }
 
     enum callbackWrapType {
       CEC_CB_LOG_MESSAGE,
@@ -123,6 +157,11 @@ namespace CEC
     cec_menu_state       m_menuState;
     bool                 m_bActivated;
     cec_logical_address  m_logicalAddress;
+    bool                 m_keepResult;
+    int                  m_result;
+    PLATFORM::CCondition<bool> m_condition;
+    PLATFORM::CMutex     m_mutex;
+    bool                 m_bSucceeded;
   };
 
   class CCECClient : private PLATFORM::CThread
