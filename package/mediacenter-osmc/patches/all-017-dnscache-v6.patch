From 741df4a3c73bd4fff30665439fade63a3950ba6d Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Wed, 29 Apr 2015 01:07:21 +0200
Subject: [PATCH] CDNSNameCache native IPV6 support

---
 xbmc/network/DNSNameCache.cpp       | 70 ++++++++++++++++++++-------
 xbmc/network/DNSNameCache.h         |  1 +
 xbmc/network/Network.cpp            | 20 ++++++++
 xbmc/network/Network.h              |  2 +
 xbmc/network/linux/NetworkLinux.cpp | 96 ++++++++++++-------------------------
 xbmc/network/linux/NetworkLinux.h   |  7 ++-
 6 files changed, 113 insertions(+), 83 deletions(-)

diff --git a/xbmc/network/DNSNameCache.cpp b/xbmc/network/DNSNameCache.cpp
index f12c782..1b05506 100644
--- a/xbmc/network/DNSNameCache.cpp
+++ b/xbmc/network/DNSNameCache.cpp
@@ -22,6 +22,8 @@
 #include "threads/SingleLock.h"
 #include "utils/log.h"
 #include "utils/StringUtils.h"
+#include "network/Network.h"
+#include "Application.h"
 
 #include <netinet/in.h>
 #include <arpa/inet.h>
@@ -42,14 +44,36 @@ bool CDNSNameCache::Lookup(const std::string& strHostName, std::string& strIpAdd
   if (strHostName.empty() && strIpAddress.empty())
     return false;
 
-  // first see if this is already an ip address
-  unsigned long address = inet_addr(strHostName.c_str());
   strIpAddress.clear();
-
-  if (address != INADDR_NONE)
+  // first see if this is already an ip address
   {
-    strIpAddress = StringUtils::Format("%lu.%lu.%lu.%lu", (address & 0xFF), (address & 0xFF00) >> 8, (address & 0xFF0000) >> 16, (address & 0xFF000000) >> 24 );
-    return true;
+    struct sockaddr_in sa;
+    struct sockaddr_in6 sa6;
+
+    bool bReturn(false);
+    if (inet_pton(AF_INET6, strHostName.c_str(), &(sa6.sin6_addr)) > 0)
+      bReturn = true;
+    else if (inet_pton(AF_INET, strHostName.c_str(), &(sa.sin_addr)) > 0)
+      bReturn = true;
+    // if we failed in looking up ipv6 format, try decimal 4 digit ipv4 format
+    // if we fail too, let's try old inet_aton (TODO: find other way to
+    // recognise ipv4 not in decimal full format
+    else
+    {
+      struct sockaddr_in t_sa;
+      if (inet_aton(strHostName.c_str(), &t_sa.sin_addr))
+      {
+        bReturn = true;
+        strIpAddress += inet_ntoa(t_sa.sin_addr);
+      }
+    }
+
+    if (bReturn)
+    {
+      if (strIpAddress.empty())
+        strIpAddress = strHostName;
+      return bReturn;
+    }
   }
 
   // check if there's a custom entry or if it's already cached
@@ -84,20 +108,34 @@ bool CDNSNameCache::Lookup(const std::string& strHostName, std::string& strIpAdd
 #endif
 
   // perform dns lookup
-  struct hostent *host = gethostbyname(strHostName.c_str());
-  if (host && host->h_addr_list[0])
+  struct addrinfo hints;
+  struct addrinfo *result(NULL);
+  char strIp[INET6_ADDRSTRLEN] = {0};
+
+  memset(&hints, 0, sizeof(struct addrinfo));
+  hints.ai_family = AF_UNSPEC;
+
+  std::string str_err;
+  int err = getaddrinfo(strHostName.c_str(), NULL, &hints, &result);
+  if (err)
+    str_err += gai_strerror(err);
+
+  bool bReturn(result != NULL);
+  if (result && g_application.getNetwork().GetIpStr(result->ai_addr, &strIp[0], INET6_ADDRSTRLEN))
   {
-    strIpAddress = StringUtils::Format("%d.%d.%d.%d",
-                                       (unsigned char)host->h_addr_list[0][0],
-                                       (unsigned char)host->h_addr_list[0][1],
-                                       (unsigned char)host->h_addr_list[0][2],
-                                       (unsigned char)host->h_addr_list[0][3]);
+    strIpAddress += strIp;
+    CLog::Log(LOGDEBUG, "%s - %s", __FUNCTION__, strIpAddress.c_str());
     g_DNSCache.Add(strHostName, strIpAddress);
-    return true;
+    bReturn = true;
+  }
+  else
+  {
+    CLog::Log(LOGERROR, "Unable to lookup host: '%s' (err detail: %s)", strHostName.c_str(), str_err.c_str());
+    bReturn = false;
   }
 
-  CLog::Log(LOGERROR, "Unable to lookup host: '%s'", strHostName.c_str());
-  return false;
+  freeaddrinfo(result);
+  return bReturn;
 }
 
 bool CDNSNameCache::GetCached(const std::string& strHostName, std::string& strIpAddress)
diff --git a/xbmc/network/DNSNameCache.h b/xbmc/network/DNSNameCache.h
index 97bb20b..f599cb9 100644
--- a/xbmc/network/DNSNameCache.h
+++ b/xbmc/network/DNSNameCache.h
@@ -24,6 +24,7 @@
 #include <string>
 
 class CCriticalSection;
+class CNetwork;
 
 class CDNSNameCache
 {
diff --git a/xbmc/network/Network.cpp b/xbmc/network/Network.cpp
index ed4c5d7..0cdab68 100644
--- a/xbmc/network/Network.cpp
+++ b/xbmc/network/Network.cpp
@@ -24,6 +24,7 @@
 
 #include "Network.h"
 #include "ApplicationMessenger.h"
+#include "Application.h"
 #include "network/NetworkServices.h"
 #include "utils/log.h"
 #ifdef TARGET_WINDOWS
@@ -140,6 +141,25 @@ CNetwork::~CNetwork()
   CApplicationMessenger::Get().NetworkMessage(SERVICES_DOWN, 0);
 }
 
+//Convert a struct sockaddr address to a string, IPv4 and IPv6:
+char *CNetwork::GetIpStr(const struct sockaddr *sa, char *s, size_t maxlen)
+{
+  switch(sa->sa_family)
+  {
+  case AF_INET:
+    inet_ntop(AF_INET, &(((struct sockaddr_in *)sa)->sin_addr), s, maxlen);
+    break;
+  case AF_INET6:
+    inet_ntop(AF_INET6, &(((struct sockaddr_in6 *)sa)->sin6_addr), s, maxlen);
+    break;
+  default:
+    strncpy(s, "Unknown AF", maxlen);
+    return NULL;
+  }
+
+  return s;
+}
+
 int CNetwork::ParseHex(char *str, unsigned char *addr)
 {
    int len = 0;
diff --git a/xbmc/network/Network.h b/xbmc/network/Network.h
index 2bd8369..82d2de9 100644
--- a/xbmc/network/Network.h
+++ b/xbmc/network/Network.h
@@ -25,6 +25,7 @@
 #include "system.h"
 
 #include "settings/lib/ISettingCallback.h"
+#include "netinet/in.h"
 
 enum EncMode { ENC_NONE = 0, ENC_WEP = 1, ENC_WPA = 2, ENC_WPA2 = 3 };
 enum NetworkAssignment { NETWORK_DASH = 0, NETWORK_DHCP = 1, NETWORK_STATIC = 2, NETWORK_DISABLED = 3 };
@@ -149,6 +150,7 @@ class CNetwork
 
    // Return true if given name or ip address corresponds to localhost
    bool IsLocalHost(const std::string& hostname);
+   char *GetIpStr(const struct sockaddr *sa, char *s, size_t maxlen = INET6_ADDRSTRLEN);
 };
 
 #ifdef HAS_LINUX_NETWORK
diff --git a/xbmc/network/linux/NetworkLinux.cpp b/xbmc/network/linux/NetworkLinux.cpp
index a73d4d2..0415136 100644
--- a/xbmc/network/linux/NetworkLinux.cpp
+++ b/xbmc/network/linux/NetworkLinux.cpp
@@ -28,6 +28,7 @@
   #include <linux/if.h>
   #include <linux/wireless.h>
   #include <linux/sockios.h>
+  #include <ifaddrs.h>
 #endif
 #ifdef TARGET_ANDROID
 #include "android/bionic_supplement/bionic_supplement.h"
@@ -66,10 +67,16 @@
 #include "utils/StringUtils.h"
 #include "utils/log.h"
 #include "utils/StringUtils.h"
+#include "Application.h"
 
 using namespace std;
 
-CNetworkInterfaceLinux::CNetworkInterfaceLinux(CNetworkLinux* network, std::string interfaceName, char interfaceMacAddrRaw[6]):
+CNetworkInterfaceLinux::CNetworkInterfaceLinux(CNetworkLinux* network,
+               unsigned int ifa_flags, struct sockaddr *ifa_addr, struct sockaddr *ifa_netmask,
+               std::string interfaceName, char interfaceMacAddrRaw[6]):
+  m_ifa_flags(ifa_flags),
+  m_ifa_addr(ifa_addr),
+  m_ifa_netmask(ifa_netmask),
   m_interfaceName(interfaceName),
   m_interfaceMacAdr(StringUtils::Format("%02X:%02X:%02X:%02X:%02X:%02X",
                                         (uint8_t)interfaceMacAddrRaw[0],
@@ -108,31 +115,21 @@ bool CNetworkInterfaceLinux::IsWireless()
 
 bool CNetworkInterfaceLinux::IsEnabled()
 {
-   struct ifreq ifr;
-   strcpy(ifr.ifr_name, m_interfaceName.c_str());
-   if (ioctl(m_network->GetSocket(), SIOCGIFFLAGS, &ifr) < 0)
-      return false;
-
-   return ((ifr.ifr_flags & IFF_UP) == IFF_UP);
+   return (m_ifa_flags & IFF_UP);
 }
 
 bool CNetworkInterfaceLinux::IsConnected()
 {
-   struct ifreq ifr;
-   int zero = 0;
-   memset(&ifr,0,sizeof(struct ifreq));
-   strcpy(ifr.ifr_name, m_interfaceName.c_str());
-   if (ioctl(m_network->GetSocket(), SIOCGIFFLAGS, &ifr) < 0)
-      return false;
-
    // ignore loopback
-   int iRunning = ( (ifr.ifr_flags & IFF_RUNNING) && (!(ifr.ifr_flags & IFF_LOOPBACK)));
+   if (m_ifa_flags & IFF_LOOPBACK)
+     return false;
 
-   if (ioctl(m_network->GetSocket(), SIOCGIFADDR, &ifr) < 0)
-      return false;
+   int iRunning = ((m_ifa_flags & IFF_RUNNING ||
+                    m_ifa_flags & (IFF_UP | IFF_LOWER_UP)));
 
    // return only interfaces which has ip address
-   return iRunning && (0 != memcmp(ifr.ifr_addr.sa_data+sizeof(short), &zero, sizeof(int)));
+   char strIp[INET6_ADDRSTRLEN] = {0};
+   return iRunning && g_application.getNetwork().GetIpStr(m_ifa_addr, &strIp[0]);
 }
 
 std::string CNetworkInterfaceLinux::GetMacAddress()
@@ -149,30 +146,16 @@ std::string CNetworkInterfaceLinux::GetCurrentIPAddress(void)
 {
    std::string result;
 
-   struct ifreq ifr;
-   strcpy(ifr.ifr_name, m_interfaceName.c_str());
-   ifr.ifr_addr.sa_family = AF_INET;
-   if (ioctl(m_network->GetSocket(), SIOCGIFADDR, &ifr) >= 0)
-   {
-      result = inet_ntoa((*((struct sockaddr_in *)&ifr.ifr_addr)).sin_addr);
-   }
-
-   return result;
+   char strIp[INET6_ADDRSTRLEN] = {0};
+   return g_application.getNetwork().GetIpStr(m_ifa_addr, &strIp[0]);
 }
 
 std::string CNetworkInterfaceLinux::GetCurrentNetmask(void)
 {
    std::string result;
 
-   struct ifreq ifr;
-   strcpy(ifr.ifr_name, m_interfaceName.c_str());
-   ifr.ifr_addr.sa_family = AF_INET;
-   if (ioctl(m_network->GetSocket(), SIOCGIFNETMASK, &ifr) >= 0)
-   {
-      result = inet_ntoa((*((struct sockaddr_in*)&ifr.ifr_addr)).sin_addr);
-   }
-
-   return result;
+   char strIp[INET6_ADDRSTRLEN] = {0};
+   return g_application.getNetwork().GetIpStr(m_ifa_netmask, &strIp[0]);
 }
 
 std::string CNetworkInterfaceLinux::GetCurrentWirelessEssId(void)
@@ -312,7 +295,7 @@ std::string CNetworkInterfaceLinux::GetCurrentDefaultGateway(void)
 
 CNetworkLinux::CNetworkLinux(void)
 {
-   m_sock = socket(AF_INET, SOCK_DGRAM, 0);
+   m_sock = socket(PF_INET, SOCK_DGRAM, 0);
    queryInterfaceList();
 }
 
@@ -332,6 +315,7 @@ CNetworkLinux::~CNetworkLinux(void)
 
 std::vector<CNetworkInterface*>& CNetworkLinux::GetInterfaceList(void)
 {
+   queryInterfaceList();
    return m_interfaces;
 }
 
@@ -432,40 +416,20 @@ void CNetworkLinux::queryInterfaceList()
    freeifaddrs(list);
 
 #else
-   FILE* fp = fopen("/proc/net/dev", "r");
-   if (!fp)
-   {
-     // TBD: Error
+   struct ifaddrs *ifaddr, *ifa;
+
+   if (getifaddrs(&ifaddr) < 0)
      return;
-   }
 
-   char* line = NULL;
-   size_t linel = 0;
-   int n;
-   char* p;
-   int linenum = 0;
-   while (getdelim(&line, &linel, '\n', fp) > 0)
+   for (ifa = ifaddr; ifa != NULL; ifa = ifa->ifa_next)
    {
-      // skip first two lines
-      if (linenum++ < 2)
-         continue;
-
-    // search where the word begins
-      p = line;
-      while (isspace(*p))
-      ++p;
-
-      // read word until :
-      n = strcspn(p, ": \t");
-      p[n] = 0;
-
-      // save the result
-      std::string interfaceName = p;
+      std::string interfaceName = ifa->ifa_name;
       GetMacAddress(interfaceName, macAddrRaw);
-      m_interfaces.push_back(new CNetworkInterfaceLinux(this, interfaceName, macAddrRaw));
+      m_interfaces.push_back(new CNetworkInterfaceLinux(this,
+                            ifa->ifa_flags, ifa->ifa_addr, ifa->ifa_netmask,
+                            interfaceName, macAddrRaw));
    }
-   free(line);
-   fclose(fp);
+   freeifaddrs(ifaddr);
 #endif
 }
 
diff --git a/xbmc/network/linux/NetworkLinux.h b/xbmc/network/linux/NetworkLinux.h
index d8b65bc..4866664 100644
--- a/xbmc/network/linux/NetworkLinux.h
+++ b/xbmc/network/linux/NetworkLinux.h
@@ -31,7 +31,9 @@ class CNetworkLinux;
 class CNetworkInterfaceLinux : public CNetworkInterface
 {
 public:
-   CNetworkInterfaceLinux(CNetworkLinux* network, std::string interfaceName, char interfaceMacAddrRaw[6]);
+   CNetworkInterfaceLinux(CNetworkLinux* network,
+                unsigned int ifa_flags, struct sockaddr *ifa_addr, struct sockaddr *ifa_netmask,
+                std::string interfaceName, char interfaceMacAddrRaw[6]);
    ~CNetworkInterfaceLinux(void);
 
    virtual std::string& GetName(void);
@@ -58,6 +60,9 @@ class CNetworkInterfaceLinux : public CNetworkInterface
     
 private:
    void WriteSettings(FILE* fw, NetworkAssignment assignment, std::string& ipAddress, std::string& networkMask, std::string& defaultGateway, std::string& essId, std::string& key, EncMode& encryptionMode);
+   unsigned int     m_ifa_flags;   /* Flags from SIOCGIFFLAGS */
+   struct sockaddr *m_ifa_addr;    /* Address of interface */
+   struct sockaddr *m_ifa_netmask; /* Netmask of interface */
    std::string     m_interfaceName;
    std::string     m_interfaceMacAdr;
    char           m_interfaceMacAddrRaw[6];
